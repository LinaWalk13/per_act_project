print()
#Gender graph
schizophrenia_and_articulation %>%
select(c("id", "diagnosis", "gender")) %>% #Selecting only the ID and the diagnosis column as we are not interested in the trials
distinct() %>% #removing duplicate rows
ggplot(aes(x = gender, fill = diagnosis))+
geom_bar(stat = "count", position=position_dodge())+
labs(title = "Gender distribution by diagnosis")+
scale_fill_manual(values = global_palette)
#Age density plot. NAs are removed here
schizophrenia_and_articulation %>%
select(c("id", "diagnosis", "age")) %>% #Selecting only the ID and the diagnosis column as we are not interested in the trials
distinct() %>%  #removing duplicate rows
ggplot(aes(x = age, color = diagnosis))+
geom_density(na.rm = TRUE)+
labs(title = "Age density for each group", x = "age", y = "count")+
scale_color_manual(values = global_palette)
#Diagnosis bar graph
schizophrenia_and_articulation %>%
select(c("id", "diagnosis")) %>% #Selecting only the ID and the diagnosis column as we are not interested in the trials
distinct() %>% #removing duplicate rows
ggplot(aes(x = diagnosis, fill = diagnosis))+
geom_bar(stat = "count")+
labs(title = "Diagnosis group sizes (total = 221) ", x = "dignosis", y = "count")+
scale_fill_manual(values = global_palette)
#Make a table with number of studies, number of participants in each
remove_outliers <- function(x) {
qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE)
H <- 1.5 * IQR(x, na.rm = TRUE)
x[x < (qnt[1] - H) | x > (qnt[2] + H)] <- NA
x
}
#Pitch by trial grouped by diagnosis
schizophrenia_and_articulation %>%
group_by(trial) %>%
mutate(pitch_mean_no_outliers = remove_outliers(pitch_mean)) %>%
ggplot(aes(x = trial, y = pitch_mean_no_outliers, color = diagnosis)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth() +
labs(title = "Average Pitch by Trial Grouped by Diagnosis", x = "Trial", y = "Average Pitch", color = "ID")+
scale_color_manual(values = global_palette)
#Total syllables by trial grouped by diagnosis
schizophrenia_and_articulation %>%
group_by(trial) %>%
mutate(total_syllables_no_outliers = remove_outliers(n_syllables)) %>%
ggplot(aes(x = trial, y = total_syllables_no_outliers, color = diagnosis)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth() +
labs(title = "Syllables by Trial Grouped by Diagnosis", x = "Trial", y = "Total syllables", color = "ID")+
scale_color_manual(values = global_palette)
#Total pauses by trial grouped by diagnosis
schizophrenia_and_articulation %>%
group_by(trial) %>%
mutate(total_pauses_no_outliers = remove_outliers(n_pauses)) %>%
ggplot(aes(x = trial, y = total_pauses_no_outliers, color = diagnosis)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth() +
labs(title = "Pauses by Trial Grouped by Diagnosis", x = "Trial", y = "Total Pauses", color = "ID")+
scale_color_manual(values = global_palette)
#Articulation rate by trial grouped by diagnosis
schizophrenia_and_articulation %>%
group_by(trial) %>%
mutate(articulation_rate_no_outliers = remove_outliers(articulation_rate)) %>%
ggplot(aes(x = trial, y = articulation_rate_no_outliers, color = diagnosis)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth() +
labs(title = "Articulation rate by Trial Grouped by Diagnosis", x = "Trial", y = "Articulation rate", color = "ID")+
scale_color_manual(values = global_palette)
#Speechrate by trial grouped by diagnosis
schizophrenia_and_articulation %>%
group_by(trial) %>%
mutate(speechrate_no_outliers = remove_outliers(speech_rate)) %>%
ggplot(aes(x = trial, y = speechrate_no_outliers, color = diagnosis)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth() +
labs(title = "Speechrate by Trial Grouped by Diagnosis", x = "Trial", y = "Speechrate", color = "ID")+
scale_color_manual(values = global_palette)
summarise_all(schizophrenia_and_articulation, ~sum(is.na(.)))
#n_pauses: 105 NAs
#averagge_pause duration: 105 NAs
#age: 16 NAs
# making the diagnosis a factor
schizophrenia_and_articulation$diagnosis <- factor(schizophrenia_and_articulation$diagnosis)
# making a bar plot
ggplot(schizophrenia_and_articulation, aes(x = diagnosis, y = n_syllables, fill = diagnosis)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge", width=0.2) +
labs(title = "Average Number of Syllables by Diagnosis", x = "Diagnosis", y = "Average Number of Syllables")+
scale_fill_manual(values = global_palette)
#Pauses has NAs. Replace with average for the diagnosis.
# doing the same but with pauses
schizophrenia_and_articulation_pause_NA_fixed <- schizophrenia_and_articulation %>%
group_by(diagnosis) %>%
mutate(n_pauses = ifelse(is.na(n_pauses), mean(n_pauses, na.rm = TRUE), n_pauses))
ggplot(schizophrenia_and_articulation_pause_NA_fixed, aes(x = diagnosis, y = n_pauses, fill = diagnosis)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge", width=0.2) +
labs(title = "Average Number of Pauses by Diagnosis", x = "Diagnosis", y = "Average Number of Pauses")+
scale_fill_manual(values = global_palette)
ggplot(schizophrenia_and_articulation_pause_NA_fixed, aes(x = diagnosis, y = education, fill = diagnosis)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge", width=0.2) +
labs(title = "Average degree of education by Diagnosis", x = "Diagnosis", y = "Degree of education as measured by?")+
scale_fill_manual(values = global_palette)
# Calculate the number of unique values in the "id" column
unique_values_count <- schizophrenia_and_articulation %>%
select(id, diagnosis)%>%
distinct()%>%
count()%>%
print()
#Gender graph
schizophrenia_and_articulation %>%
select(c("id", "diagnosis", "gender")) %>% #Selecting only the ID and the diagnosis column as we are not interested in the trials
distinct() %>% #removing duplicate rows
ggplot(aes(x = gender, fill = diagnosis))+
geom_bar(stat = "count", position=position_dodge())+
labs(title = "Gender distribution by diagnosis")+
scale_fill_manual(values = global_palette)
#Age density plot. NAs are removed here
schizophrenia_and_articulation %>%
select(c("id", "diagnosis", "age")) %>% #Selecting only the ID and the diagnosis column as we are not interested in the trials
distinct() %>%  #removing duplicate rows
ggplot(aes(x = age, color = diagnosis))+
geom_density(na.rm = TRUE)+
labs(title = "Age density for each group", x = "age", y = "count")+
scale_color_manual(values = global_palette)
#Diagnosis bar graph
schizophrenia_and_articulation %>%
select(c("id", "diagnosis")) %>% #Selecting only the ID and the diagnosis column as we are not interested in the trials
distinct() %>% #removing duplicate rows
ggplot(aes(x = diagnosis, fill = diagnosis))+
geom_bar(stat = "count")+
labs(title = "Diagnosis group sizes (total = 221) ", x = "dignosis", y = "count")+
scale_fill_manual(values = global_palette)
#Make a table with number of studies, number of participants in each
remove_outliers <- function(x) {
qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE)
H <- 1.5 * IQR(x, na.rm = TRUE)
x[x < (qnt[1] - H) | x > (qnt[2] + H)] <- NA
x
}
#Pitch by trial grouped by diagnosis
schizophrenia_and_articulation %>%
group_by(trial) %>%
mutate(pitch_mean_no_outliers = remove_outliers(pitch_mean)) %>%
ggplot(aes(x = trial, y = pitch_mean_no_outliers, color = diagnosis)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth() +
labs(title = "Average Pitch by Trial Grouped by Diagnosis", x = "Trial", y = "Average Pitch", color = "ID")+
scale_color_manual(values = global_palette)
#Total syllables by trial grouped by diagnosis
schizophrenia_and_articulation %>%
group_by(trial) %>%
mutate(total_syllables_no_outliers = remove_outliers(n_syllables)) %>%
ggplot(aes(x = trial, y = total_syllables_no_outliers, color = diagnosis)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth() +
labs(title = "Syllables by Trial Grouped by Diagnosis", x = "Trial", y = "Total syllables", color = "ID")+
scale_color_manual(values = global_palette)
#Total pauses by trial grouped by diagnosis
schizophrenia_and_articulation %>%
group_by(trial) %>%
mutate(total_pauses_no_outliers = remove_outliers(n_pauses)) %>%
ggplot(aes(x = trial, y = total_pauses_no_outliers, color = diagnosis)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth() +
labs(title = "Pauses by Trial Grouped by Diagnosis", x = "Trial", y = "Total Pauses", color = "ID")+
scale_color_manual(values = global_palette)
#Articulation rate by trial grouped by diagnosis
schizophrenia_and_articulation %>%
group_by(trial) %>%
mutate(articulation_rate_no_outliers = remove_outliers(articulation_rate)) %>%
ggplot(aes(x = trial, y = articulation_rate_no_outliers, color = diagnosis)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth() +
labs(title = "Articulation rate by Trial Grouped by Diagnosis", x = "Trial", y = "Articulation rate", color = "ID")+
scale_color_manual(values = global_palette)
#Speechrate by trial grouped by diagnosis
schizophrenia_and_articulation %>%
group_by(trial) %>%
mutate(speechrate_no_outliers = remove_outliers(speech_rate)) %>%
ggplot(aes(x = trial, y = speechrate_no_outliers, color = diagnosis)) +
geom_point(position = position_jitter(width = 0.1, height = 0)) +
geom_smooth() +
labs(title = "Speechrate by Trial Grouped by Diagnosis", x = "Trial", y = "Speechrate", color = "ID")+
scale_color_manual(values = global_palette)
#Removing NA's
schizophrenia_and_articulation <- schizophrenia_and_articulation %>%
mutate(across(colnames(.), function(x){randomForest::na.roughfix(x)}))
set.seed(123)
simple_initial_split <- initial_validation_split(schizophrenia_and_articulation, prop = c(0.7,0.15), strata = "diagnosis")
table(schizophrenia_and_articulation$diagnosis)
simple_training_data <- training(simple_initial_split)
table(simple_training_data$diagnosis)
simple_validation_data <- validation(simple_initial_split)
table(simple_validation_data$diagnosis)
simple_testing_data <- testing(simple_initial_split)
table(simple_testing_data$diagnosis)
simple_recipe <- recipe(diagnosis ~ ., data = schizophrenia_and_articulation) %>%
update_role(id, new_role = 'ID')%>%
update_role(gender, new_role = "dont_use") %>%
update_role(age, new_role = "dont_use") %>%
update_role(education, new_role = "dont_use")
summary(simple_recipe)
simple_rf_model <- rand_forest() %>%
set_mode("classification") %>%
set_engine("randomForest")
simple_model_workflow <- workflow() %>%
add_recipe(simple_recipe) %>%
add_model(simple_rf_model)
simple_model_workflow
# Given confusion matrix values
true_positives <- 100
false_positives <- 57
false_negatives <- 49
true_negatives <- 79
# Calculate odds of being right to wrong
odds_value <- (true_positives + true_negatives) / (false_positives + false_negatives)
# Print the expression and calculated odds value
odds_expression <- paste0("Odds of being right to wrong = ", true_positives + true_negatives, " / ", false_positives + false_negatives)
cat(odds_expression, "\n")
cat("Calculated Odds Value: ", odds_value, "\n")
# Given confusion matrix values
true_positives <- 137
false_positives <- 28
false_negatives <- 12
true_negatives <- 108
# Calculate odds of being right to wrong
odds_value <- (true_positives + true_negatives) / (false_positives + false_negatives)
# Print the expression and calculated odds value
odds_expression <- paste0("Odds of being right to wrong = ", true_positives + true_negatives, " / ", false_positives + false_negatives)
cat(odds_expression, "\n")
cat("Calculated Odds Value: ", odds_value, "\n")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documents/Uni/Semester 03/Methods-3/A3/scripts")
if (!requireNamespace("pacman", quietly = TRUE)) {
install.packages("pacman")
}
# Install and load necessary packages using pacman
pacman::p_load(tidymodels, rsample, groupdata2, tune, dials, recipes,
workflows, workflowsets, parsnip, yardstick,
tidyverse, hrbrthemes, gcookbook, ggplot2, randomForest, doParallel,vip,dbarts,discrim,naivebayes, ranger, knitr)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=40),tidy=TRUE)
#ADJUST GLOBAL AESTHETIC PALETTE
# Define your preferred default fill colors
global_palette <- c("#380911", "#f68bb5", "#570f29", "#c6466e", "#7c1a3e")
# Set the default fill scale to use the custom color palette
scale_fill_manual(values = global_palette)
# Define the starting and ending colors for the gradient
start_color <- "#f68bb5"
end_color <- "#380911"
# Generate a custom gradient color palette
global_gradient_palette <- colorRamp(c(start_color, end_color))
theme_set(theme_minimal())
articulation_data <- read_delim("~/Documents/Uni/Semester 03/Methods-3/A3/data/articulation_data.txt")
articulation_data <- read_delim("~/Documents/Uni/Semester 03/Methods-3/A3/data/articulation_data_updated.txt")
articulation_data <- read_delim("~/Documents/Uni/Semester 03/Methods-3/A3/data/articulation_data_updated_again.txt")
articulation_data <- articulation_data %>%
rename(
speech_rate = `speech_rate (n_syllables/duration)`,
articulation_rate = `articulation_rate (n_syllables/phonation_duration)`,
)
#This data is also tab-delimited
pitch_data <- read_delim("~/Documents/Uni/Semester 03/
Methods-3/A3/data/pitch_data.txt")
pitch_data <- read_delim("~/Documents/Uni/Semester 03/
Methods-3/A3/data/pitch_data_updated.txt")
#renaming pitch_data to match lowercase standard
pitch_data <- pitch_data %>%
rename(
study = Study,
diagnosis = Diagnosis,
id = ID,
trial = Trial
)
View(pitch_data)
#This data is also tab-delimited
pitch_data <- read_delim("~/Documents/Uni/Semester 03/Methods-3/A3/data/pitch_data.txt")
pitch_data <- read_delim("~/Documents/Uni/Semester 03/Methods-3/A3/data/pitch_data_updated.txt")
#renaming pitch_data to match lowercase standard
pitch_data <- pitch_data %>%
rename(
study = Study,
diagnosis = Diagnosis,
id = ID,
trial = Trial
)
#This data is also tab-delimited
pitch_data <- read_delim("~/Documents/Uni/Semester 03/Methods-3/A3/data/pitch_data.txt")
pitch_data <- read_delim("~/Documents/Uni/Semester 03/Methods-3/A3/data/pitch_data_updated.txt")
#renaming pitch_data to match lowercase standard
pitch_data <- pitch_data %>%
rename(
study = Study,
diagnosis = Diagnosis,
id = ID,
trial = Trial
)
demographic_data <- read_delim("~/Documents/Uni/Semester 03/Methods-3/A3/data/demographic_data.txt")
#merging in two parts since demographic doesnt share trial
merged_part_one <- merge(pitch_data, demographic_data, by = c("study", "id", "diagnosis"))
merged_set <- merge(articulation_data, merged_part_one, by = c("study", "id", "diagnosis",
"trial"))
#Renaming the columns
schizophrenia_and_articulation <- merged_set %>%
rename(
pitch_interquartile_range = iqr,
pitch_mean_absolute_deviation = mad,
pitch_coefficient_of_variation = coefvar,
pitch_mean= mean,
pitch_sd= sd,
pitch_min= min,
pitch_max= max,
pitch_median= median,
)
write_csv(schizophrenia_and_articulation, "~/Documents/Uni/Semester 03/Methods-3/A3/data/schizophrenia_and_articulation.csv")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(devtools, tidyverse, dplyr, ggplot2, jsonlite, tidyr)
library(pupilr)
pacman::p_load(devtools, tidyverse, dplyr, ggplot2, jsonlite, tidyr, pupilr)
library(pupilr)
pacman::p_load(devtools, tidyverse, dplyr, ggplot2, jsonlite, tidyr, pupilr)
library(eyer)
pacman::p_load(devtools, tidyverse, dplyr, ggplot2, jsonlite, tidyr, pupilr, eyer)
pacman::p_load(devtools, tidyverse, dplyr, ggplot2, jsonlite, tidyr, pupilr, eyer)
install.packages('BiocManager')
pacman::p_load(devtools, tidyverse, dplyr, ggplot2, jsonlite, tidyr)
devtools::install_github("hejtmy/pupilr")
pacman::p_load(devtools, tidyverse, dplyr, ggplot2, jsonlite, tidyr)
devtools::install_github("hejtmy/pupilr")
devtools::install_github("hejtmy/eyer")
pacman::p_load(devtools, tidyverse, dplyr, ggplot2, jsonlite, tidyr)
devtools::install_github("hejtmy/pupilr")
devtools::install_github("hejtmy/eyer")
infos <- read_csv("/Users/lina/Documents/3rd_semester/Perception_and_Action/raw_data/sections.csv")
infos <- read_csv("~/Documents/Uni/Semester 03/pa_project/per_act_project/raw-data-export/sections.csv")
answers <- read_csv("~/Documents/Uni/Semester 03/pa_project/per_act_project/answers.csv")
infos <- read_csv("~/Documents/Uni/Semester 03/pa_project/per_act_project/raw-data-export/sections.csv")
answers <- read_csv("~/Documents/Uni/Semester 03/pa_project/per_act_project/answers.csv")
# Assuming df1 and df2 are your two data frames, and "id" is the common identifier
infos <- merge(infos, answers, by = "id", all.x = TRUE)
View(infos)
View(infos)
infos <- read_csv("~/Documents/Uni/Semester 03/pa_project/per_act_project/raw-data-export/sections.csv")
answers <- read_csv("~/Documents/Uni/Semester 03/pa_project/per_act_project/answers.csv")
# Assuming df1 and df2 are your two data frames, and "id" is the common identifier
infos <- merge(infos, answers, by = "id", all.x = TRUE)
# remove unneeded columns from infos df
infos <- infos[, -c(2, 5,6,7,8,9,10,13,21)]
# rename for merging
colnames(infos) <- gsub(" ", ".", colnames(infos))
main_folder <- "/Users/lina/Documents/3rd_semester/Perception_and_Action/raw_data/"
subfolders <- list.dirs("/Users/lina/Documents/3rd_semester/Perception_and_Action/raw_data/", full.names = T, recursive = T)
main_folder <- "/Users/lina/Documents/3rd_semester/Perception_and_Action/raw_data/"
subfolders <- list.dirs("/Users/lina/Documents/3rd_semester/Perception_and_Action/raw_data/", full.names = T, recursive = T)
main_folder <- "~/Documents/Uni/Semester 03/pa_project/per_act_project"
subfolders <- list.dirs("~/Documents/Uni/Semester 03/pa_project/per_act_project", full.names = T, recursive = T)
# create list of "fixations.csv" paths
fixations <- lapply(subfolders, function(subfolder) {
# file path within each subfolder
fixations_path <- file.path(subfolder, "fixations.csv")
# Check if the file exists
if (file.exists(fixations_path)) {
# if the file exists, return the file path
return(fixations_path)
} else {
# if the file does not exist, return NULL
return(NULL)
}
})
# Remove NULL Values from the list
fixations <- Filter(Negate(is.null), fixations)
# Read and Combine CSV filess
fixations <- bind_rows(lapply(fixations, read.csv))
# remove unwanted columns
fixations <- fixations[, - c(1, 5, 7, 8, 9, 10)]
fixations <- rename(fixations, start = start.timestamp..ns.,
duration = duration..ms.)
fixations$start <- fixations$start /1e9
# create list of paths
gaze <- lapply(subfolders, function(subfolder) {
# file path within each subfolder
gaze_path <- file.path(subfolder, "gaze.csv")
# Check if the file exists
if (file.exists(gaze_path)) {
# if the file exists, return the file path
return(gaze_path)
} else {
# if the file does not exist, return NULL
return(NULL)
}
})
# Remove NULL values from the list
gaze <- Filter(Negate(is.null), gaze)
# Read and combine CSV files
gaze <- bind_rows(lapply(gaze, read.csv))
# if we use the data maybe rename xolumsn and so on
# create list of "fixations.csv" paths
events <- lapply(subfolders, function(subfolder) {
# file path within each subfolder
events_path <- file.path(subfolder, "events.csv")
# check if the file exists
if (file.exists(events_path)) {
# if the file exists, return the file path
return(events_path)
} else {
# if the file does not exist, return NULL
return(NULL)
}
})
# remove NULL values from the list
events <- Filter(Negate(is.null), events)
# combine
events <- bind_rows(lapply(events, read.csv))
events <- rename(events, task.time = timestamp..ns.)
events$task.time <- events$task.time /1e9
events <- subset(events, type == "cloud")
# create begin and end columns with time stamp
events <- events %>%
group_by(recording.id, name) %>%
summarise(task_time = first(task.time), .groups = "drop") %>%
pivot_wider(
id_cols = recording.id,
names_from = name,
values_from = task_time
) %>%
rename(
task.begin = "task.begin",
task.end = "task.end"
)
# bind events and fixation data
fixation_events <- left_join(events, fixations, by = "recording.id")
# filter fixation events that are within the task duration
fixation_events <- fixation_events %>%
filter(start > task.begin, start < task.end)
info_fix <- left_join(fixation_events, infos, by="recording.id")
info_fix$task.duration <- info_fix$task.end - info_fix$task.begin
info_fix <- info_fix %>%
group_by(recording.id) %>%
mutate(
fixation.freq = n_distinct(fixation.id) / task.duration)
my_palette <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3")
# fixation duration boxplot
info_fix %>%
ggplot(aes(x = condition, y = duration , fill = condition)) +
geom_boxplot() +
labs(title = "Fixation Duration in Each Condition",
x = "Condition",
y = "Fixation Duration")+
scale_fill_manual(values=my_palette)+
theme_bw()
# overalll fixation duration
info_fix %>%
ggplot(aes(x = duration)) +
geom_density(alpha = 0.5, fill = "#66c2a5") +
labs(title = "Fixation Duration Distribution",
x = "Fixation Duration",
y = "Density") +
theme_bw()
#fixation duration density wrapped by condiotn
info_fix %>%
ggplot(aes(x = duration, fill = condition)) +
geom_density(alpha = 0.5) +
labs(title = "Fixation Duration Distribution",
x = "Fixation Duration",
y = "Density") +
scale_fill_manual(values = my_palette) +
theme_bw() +
facet_wrap(~condition, scale = "fixed")
# number of fixations in one recording
info_fix %>%
ggplot(aes(x = recording.id, fill = condition)) +
geom_bar(position = "dodge") +
labs(title = "Fixation Number in Each Recording for Different Conditions",
x = "Recording ID",
y = "Fixation Number")+
scale_fill_manual(values=my_palette)+
theme_bw()
# boxplot task duration
info_fix %>%
ggplot(aes(x = condition, y = task.duration , fill = condition)) +
geom_boxplot() +
labs(title = "Task Duration in each condition",
x = "Condition",
y = "Task duration")+
scale_fill_manual(values=my_palette)+
theme_bw()
# overall fixation frequency
info_fix %>%
ggplot(aes(x = fixation.freq)) +
geom_density(alpha = 0.8, fill = "#fc8d62") +
labs(title = "Fixation Frequency Distribution",
x = "Fixation Frequency",
y = "Density") +
theme_bw()
# fixation frequency
info_fix %>%
ggplot(aes(x = fixation.freq, fill = condition)) +
geom_density(alpha = 0.5) +
labs(title = "Fixation Frequency Distribution",
x = "Fixation Frequency",
y = "Density") +
scale_fill_manual(values = my_palette) +
theme_bw() +
facet_wrap(~condition, scale = "fixed")
# showing the fixations per second
# boxplot fixation frequency
info_fix %>%
ggplot(aes(x = condition, y = fixation.freq , fill = condition)) +
geom_boxplot() +
labs(title = "Fixation Frequency in Each Condition",
x = "Condition",
y = "Fixation Frequency")+
scale_fill_manual(values=my_palette)+
theme_bw()
